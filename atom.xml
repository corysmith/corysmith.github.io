<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cory's Blog of ABC's]]></title>
  <link href="http://corysmith.github.io/atom.xml" rel="self"/>
  <link href="http://corysmith.github.io/"/>
  <updated>2014-03-02T00:38:34-07:00</updated>
  <id>http://corysmith.github.io/</id>
  <author>
    <name><![CDATA[Cory Smith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Variables]]></title>
    <link href="http://corysmith.github.io/blog/2014/01/24/the-different-type-of-ruby-variables/"/>
    <updated>2014-01-24T18:06:33-07:00</updated>
    <id>http://corysmith.github.io/blog/2014/01/24/the-different-type-of-ruby-variables</id>
    <content type="html"><![CDATA[<h3>What the heck is a variable?</h3>

<br>


<p>A variable is a place to store data. Each variable is given a unique name
An <em>important</em>  factor when coding Ruby is the scope of a variable and where it is visible in a program.</p>

<h3>There are 4 main variables.</h3>

<br>


<h4>Global Variables</h4>

<br>


<p>These variables are available throughout the <strong>ENTIRE</strong> program. You must be careful when using global vaiables as it can cause for major headaches when trying to de-bug! Global variables are hardly used and are the least common variable. Global variables will start out with the symbol $</p>

<h4>Local Variables</h4>

<br>


<p>They always begin with a lower case letter or &ldquo;_&rdquo; character. They are only available for certain methods within your program. Local variables do not work well with instance variables and global variables. They do not have a special character in front of them and is only available inside a method block.</p>

<br>


<h4>Class Variables</h4>

<br>


<p>They belong to a specific class. Class variables start with the characters @@. They only store data for the Class and not it&rsquo;s decendents. Which essentially means all objects created from a particular class, share class variables. Unlike global variables, class variables must be initialized before they are used.</p>

<br>


<h4>Instance Variables.</h4>

<br>


<p>Are variables that belong to a particular instances of a class and do <strong>NOT</strong> effect the entire class. Instance variables start with only one @. ex: @cory vs class variables @@cory. These are the most common variables as they are flexable and allow to de-bug easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arguments vs Parameters]]></title>
    <link href="http://corysmith.github.io/blog/2014/01/22/arguments-vs-parameters/"/>
    <updated>2014-01-22T20:58:41-07:00</updated>
    <id>http://corysmith.github.io/blog/2014/01/22/arguments-vs-parameters</id>
    <content type="html"><![CDATA[<p>No, no. I am not talking about proper ways to communicate or anything like that. That&rsquo;s a whole other coversation. Today&rsquo;s post is about coding.<br></p>

<br>


<h2>What is it?</h2>

<br>


<p>Parameters and Arguments are very common practices and the <strong>foundation</strong> of Ruby coding. This can be very confusing when new to ruby.</p>

<pre><code>def multiply_by_11(n)   
  puts n * 11
end

multiply_by_11(10)
multiply_by_11(101)
multiply_by_11(19)   
</code></pre>

<br>


<p>Above is a very simple Method that I &ldquo;defined&rdquo; AKA named &ldquo;multiply_by_11&rdquo;. It takes whatever number I want and multiplies it by 11. Which is the best number in the world, if I must say. For no reason, other then it is my favorite number. Okay enough jibber jabber. Let&rsquo;s get back to business.</p>

<h3>Parameter</h3>

<p>I like to think of a parameter as a &ldquo;place holder&rdquo; or a &ldquo;nickname&rdquo; for that patucular section of code.   The (n) right after &ldquo;multiply_by_11&rdquo; is the parameter that is short for number.</p>

<h3>Argument</h3>

<p>Is the actual number that I want to find the answer to. In this case there is a total of 3 arguments (10), (101), and (19). An argument is only at the end, after the method is defined and the parameter is set.</p>

<br>


<h3>Conclusion</h3>

<p> We created the method &ldquo;multiply_by_11&rdquo; above, we gave it the <strong>parameter</strong> &ldquo;n&rdquo; for number, but passed it the <strong>argument</strong> 10,101, and 19 when we called it. When the program is ran, it will spit out the answers 110, 1111, and 209.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesomeness. Business. Coding.]]></title>
    <link href="http://corysmith.github.io/blog/2014/01/18/awesomeness-business-coding/"/>
    <updated>2014-01-18T18:08:44-07:00</updated>
    <id>http://corysmith.github.io/blog/2014/01/18/awesomeness-business-coding</id>
    <content type="html"><![CDATA[<p>Welcome to my blog!</p>

<br/>


<ul>
<li>Code: I will post various problems and solutions for the problems I run into.</li>
<li>Business: I will talk about different brands, interesting articles and business practices good and bad.</li>
<li>Life: I enjoy life to the fullest</li>
</ul>


<br/>


<br/>


<br/>


<blockquote><p>&ldquo;Some people drift through their entire life. They do it one day at a time, one week at a time, one month at a time. It happens so gradually they are unaware of how their lives are slipping away until it&rsquo;s too late.&rdquo;</p></blockquote>

<p>The thought of that is absolutely scary. One of my business mentors always has told me to visualize myself as a lemon and at the very end of life, you want to make sure you have squeezed every drop of life out of that lemon.</p>

<br/>


<h2>Commitment <br/></h2>

<p>My goal is to update this site <strong>once a week</strong> or as I come across coding issues that have caused me major headaches. To try and help you avoid what I went through in a lot shorter time.</p>

<br/>


<br/>


<p>-Cory Smith</p>
]]></content>
  </entry>
  
</feed>
